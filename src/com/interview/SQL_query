SQL Query

1. Department wise salary > average salary

    SELECT dept_id, avg(salary) from emp group by dept_id having avg(salary) > 12000;

2. Department Wise Highest Salary -

    SELECT d.dept_name, MAX(e.salary) FROM department d JOIN employee e ON d.id = e.dept_id GROUP BY d.dept_name;

3. 2nd highest salary employees in each department

    SELECT t.deptno, max(t.salary) FROM emp t WHERE t.salary < (SELECT max(salary) FROM emp t2 WHERE t2.deptno = t.deptno) GROUP BY t.deptno;

4. Department wise duplicate name -

    SELECT a.dept_id, a.name from user a, user b where a.name = b.name and a.id < b.id;

5. Retrieve duplicate records based on multiple column

    SELECT EmpID, EmpFname, Department, COUNT(*) FROM EmployeeInfo GROUP BY EmpID, EmpFname, Department HAVING COUNT(*) > 1;

6. Delete duplicates

    DELETE t1 FROM contacts t1  INNER JOIN contacts t2 WHERE t1.id < t2.id AND t1.email = t2.email;

7. Create a table only structure

    CREATE TABLE NewTable AS SELECT * FROM EmployeeInfo;    SELECT * INTO NewTable FROM EmployeeInfo WHERE 1 = 0;

8. Write a query to fetch all employees who also hold the managerial position.

    SELECT DISTINCT manager.* FROM Employee AS manager JOIN Employee AS employee ON manager.id = employee.manager_id;

9. Find employees with salary less than Dept average

    SELECT name, department_id, salary FROM employees e WHERE salary < (select avg(salary) from employees e2 where e2.department_id = e.department_id);

Department wise salary sum -

SELECT dept_id, sum(salary) from user group by dept_id;

Top N Max Salary

SELECT TOP N * FROM Employee ORDER BY Salary DESC;

Department wise salary > average salary

SELECT dept_id, avg(salary) from emp group by dept_id having avg(salary) > 12000;

2nd highest salary

SELECT max(salary) from employee WHERE salary NOT IN (SELECT max(salary) from employee)

SELECT salary FROM employee ORDER BY salary desc limit n-1,1;


Department Wise Highest Salary -

SELECT d.dept_name, MAX(e.salary) FROM department d JOIN employee e ON d.dept_id = e.dept_id GROUP BY d.dept_name;







2nd highest salary employees in each department

SELECT t.deptno, max(t.salary) FROM emp t WHERE t.salary < (SELECT max(salary) FROM emp t2 WHERE t2.deptno = t.deptno) GROUP BY t.deptno;

Department wise duplicate name -

SELECT a.dept_id, a.name from user a, user b where a.name = b.name and a.id < b.id;

Employee having salary greater than manager

SELECT a.Name FROM Employee AS a, Employee AS b WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;

Find Duplicates

SELECT order_id, count(order_id) from order group_by order_id having count(order_id) > 1;

Retrieve duplicate records based on multiple column

 SELECT EmpID, EmpFname, Department, COUNT(*) FROM EmployeeInfo GROUP BY EmpID, EmpFname, Department HAVING COUNT(*) > 1;


Delete duplicates

DELETE t1 FROM contacts t1  INNER JOIN contacts t2 WHERE t1.id < t2.id AND t1.email = t2.email;
Employees who are not present in department table

SELECT * from emp where dept_id not in (select id from department);

SELECT * from emp LEFT JOIN dept on emp.dept_id = dept.id where dept.id is null;

Customers Who Never Order

SELECT c.name AS Customers FROM Customers c LEFT JOIN Orders o ON c.id=o.customerId WHERE o.customerId IS NULL;

People working for walmart , flipkart and microsoft we want to say product based else service based

SELECT student_id,student_name, student_company,
CASE WHEN student_company in ('flipkart','walmart','microsoft')
THEN 'product based' ELSE 'service based' END as company_type from students;

Create a table only structure

CREATE TABLE NewTable AS SELECT * FROM EmployeeInfo;

SELECT * INTO NewTable FROM EmployeeInfo WHERE 1 = 0;


Show the last record from a table.
SELECT * FROM Student WHERE STUDENT_ID = (SELECT MAX(STUDENT_ID) FROM STUDENT);
Write an SQL query to fetch the last five records
SELECT * FROM
(SELECT * FROM Student ORDER BY STUDENT_ID DESC LIMIT 5)
AS subquery ORDER BY STUDENT_ID;

Query to get current date : SELECT CURDATE();

Query to get current date and time : SELECT NOW();

Write a query to fetch all employees who also hold the managerial position.


SELECT E.name, P.EmpPosition FROM EmployeeInfo E INNER JOIN EmployeePosition P ON E.EmpID = P.EmpID AND P.EmpPosition IN ('Manager');


Write a query to fetch the department-wise count of employees sorted by departmentâ€™s count in ascending order.


SELECT Department, count(EmpID) FROM Employee GROUP BY Department ORDER BY count(EmpID) ASC;



Union = Distinct record from 2 tables
   Union All = All record from 2 tables

Find employees with salary less than Dept average

SELECT name, department_id, salary FROM employees e WHERE salary < (select avg(salary) from employees e2 where e2.department_id = e.department_id);

