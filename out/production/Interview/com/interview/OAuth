What is OAuth?

OAuth, Open Authorization is a framework that provides applications the ability for “secure designated access.” For example, you can tell
Facebook that it’s OK for ESPN.com to access your profile or post updates to your timeline without having to give ESPN
your Facebook password. This minimizes risk in a major way: In the event ESPN suffers a breach, your Facebook password
remains safe.

OAuth doesn’t share password data but instead uses authorization tokens to prove an identity between consumers and
service providers. OAuth is an authentication protocol that allows you to approve one application interacting with
another on your behalf without giving away your password.

OAuth Explained -OAuth is about authorization and not authentication.

How OAuth Works
There are 3 main players in an OAuth transaction: the user, the consumer, and the service provider.
In our example,
    Joe is the user, Bitly is the consumer, and Twitter is the service provided.

Step 1 – The User Shows Intent

Joe (User): “Hey, Bitly, I would like you to be able to post links directly to my Twitter stream.”
Bitly (Consumer): “Great! Let me go ask for permission.”
Step 2 – The Consumer Gets Permission

Bitly: “I have a user that would like me to post to his stream. Can I have a request token?”
Twitter (Service Provider): “Sure.  Here’s a token and a secret.”
The secret is used to prevent request forgery.  The consumer uses the secret to sign each request so that the service provider can verify it is actually coming from the consumer application.

Step 3 – The User Is Redirected to the Service Provider

Bitly: “OK, Joe.  I’m sending you over to Twitter so you can approve.  Take this token with you.”
Joe: “OK!”
- Bitly directs Joe to Twitter for authorization>

This is the scary part. If Bitly were super-shady Evil Co. it could pop up a window that looked like Twitter but was really phishing for your username and password.  Always be sure to verify that the URL you’re directed to is actually the service provider (Twitter, in this case).

Step 4 – The User Gives Permission

Joe: “Twitter, I’d like to authorize this request token that Bitly gave me.”
Twitter: “OK, just to be sure, you want to authorize Bitly to do X, Y, and Z with your Twitter account?”
Joe: “Yes!”
Twitter: “OK, you can go back to Bitly and tell them they have permission to use their request token.”
Twitter marks the request token as “good-to-go,” so when the consumer requests access, it will be accepted (so long as it’s signed using their shared secret).

Step 5 – The Consumer Obtains an Access Token

Bitly: “Twitter, can I exchange this request token for an access token?”
Twitter: “Sure.  Here’s your access token and secret.”
Step 6 – The Consumer Accesses the Protected Resource

Bitly: “I’d like to post this link to Joe’s stream.  Here’s my access token!”
Twitter: “Done!”

In our scenario, Joe never had to share his Twitter credentials with Bitly.  He simply delegated access using OAuth in a secure manner.
At any time, Joe can login to Twitter and review the access he has granted and revoke tokens for specific applications without affecting others.
OAuth also allows for granular permission levels.  You can give Bitly the right to post to your Twitter account, but restrict LinkedIn to read-only access.

OAuth 1.0 vs. OAuth 2.0

OAuth 2.0 is a complete redesign from OAuth 1.0, and the two are not compatible. If you create a new application today,
use OAuth 2.0. This blog only applies to OAuth 2.0, since OAuth 1.0 is deprecated.

OAuth 2.0 is faster and easier to implement. OAuth 1.0 used complicated cryptographic requirements, only supported three
flows, and did not scale.

OAuth 2.0, on the other hand, has six flows for different types of applications and requirements and enables signed
secrets over HTTPS. OAuth tokens no longer need to be encrypted on the endpoints in 2.0 since they are encrypted in transit.


OAuth 2.0

OAuth 2.0, which stands for “Open Authorization”, is a standard designed to allow a website or application to access
resources hosted by other web apps on behalf of a user. It replaced OAuth 1.0 in 2012.

Principles of OAuth2.0
OAuth 2.0 is an authorization protocol. It is designed primarily as a means of granting access to a set of resources.

OAuth 2.0 uses Access Tokens. An Access Token is a piece of data that represents the authorization to access resources
on behalf of the end-user. OAuth 2.0 doesn’t define a specific format for Access Tokens. However, in some contexts, the
JSON Web Token (JWT) format is often used. This enables token issuers to include data in the token itself. Also, for
security reasons, Access Tokens may have an expiry.

OAuth2.0 Roles
The idea of roles is part of the core specification of the OAuth2.0 authorization framework. These define the essential
components of an OAuth 2.0 system, and are as follows:

Resource Owner: The user or system that owns the protected resources and can grant access to them.

Client: The client is the system that requires access to the protected resources. To access resources, the Client must
hold the appropriate Access Token.

Authorization Server: This server receives requests from the Client for Access Tokens and issues them upon successful
authentication and consent by the Resource Owner. The authorization server exposes two endpoints: the Authorization
endpoint, which handles the interactive authentication and consent of the user, and the Token endpoint, which is
involved in a machine to machine interaction.

Resource Server: A server that protects the user’s resources and receives access requests from the Client. It accepts
and validates an Access Token from the Client and returns the appropriate resources to it.

OAuth 2.0 Scopes
Scopes are an important concept in OAuth 2.0. They are used to specify exactly the reason for which access to resources
may be granted. Acceptable scope values, and which resources they relate to, are dependent on the Resource Server.

OAuth 2.0 Access Tokens and Authorization Code
The OAuth 2 Authorization server may not directly return an Access Token after the Resource Owner has authorized access.
Instead, and for better security, an Authorization Code may be returned, which is then exchanged for an Access Token.
In addition, the Authorization server may also issue a Refresh Token with the Access Token. Unlike Access Tokens,
Refresh Tokens normally have long expiry times and may be exchanged for new Access Tokens when the latter expires.
Because Refresh Tokens have these properties, they have to be stored securely by clients.

How Does OAuth 2.0 Work?
At the most basic level, before OAuth 2.0 can be used, the Client must acquire its own credentials, a _client id _ and
client secret, from the Authorization Server in order to identify and authenticate itself when requesting an Access Token.

Using OAuth 2.0, access requests are initiated by the Client. The token request, exchange, and response follow this general flow:

    a. The Client requests authorization from the Authorization server, supplying the client id and secret to as identification.
    it also provides the scopes and an endpoint URI (redirect URI) to send the Access Token or the Authorization Code to.

    b. The Authorization server authenticates the Client and verifies that the requested scopes are permitted.

    c. The Resource owner interacts with the Authorization server to grant access.

    d. The Authorization server redirects back to the Client with either an Authorization Code or Access Token, depending on
    the grant type, as it will be explained in the next section. A Refresh Token may also be returned.

    e. With the Access Token, the Client requests access to the resource from the Resource server.

Grant Types in OAuth 2.0
In OAuth 2.0, grants are the set of steps a Client has to perform to get resource access authorization. The
authorization framework provides several grant types to address different scenarios:

    Authorization Code grant: The Authorization server returns a single-use Authorization Code to the Client, which is
    then exchanged for an Access Token. This is the best option for traditional web apps where the exchange can securely
    happen on the server side. The Authorization Code flow might be used by Single Page Apps (SPA) and mobile/native apps.
    However, here, the client secret cannot be stored securely, and so authentication, during the exchange, is limited to
    the use of client id alone. A better alternative is the Authorization Code with PKCE grant, below.

    Implicit Grant: A simplified flow where the Access Token is returned directly to the Client. In the Implicit flow,
    the authorization server may return the Access Token as a parameter in the callback URI or as a response to a form
    post. The first option is now deprecated due to potential token leakage.

    Authorization Code Grant with Proof Key for Code Exchange (PKCE): This authorization flow is similar to the Authorization
    Code grant, but with additional steps that make it more secure for mobile/native apps and SPAs.

    Resource Owner Credentials Grant Type: This grant requires the Client first to acquire the resource owner’s credentials,
    which are passed to the Authorization server. It is, therefore, limited to Clients that are completely trusted. It
    has the advantage that no redirect to the Authorization server is involved, so it is applicable in the use cases where
    a redirect is infeasible.

    Client Credentials Grant Type: Used for non-interactive applications e.g., automated processes, microservices, etc.
    In this case, the application is authenticated per se by using its client id and secret.

    Device Authorization Flow: A grant that enables use by apps on input-constrained devices, such as smart TVs.

    Refresh Token Grant: The flow that involves the exchange of a Refresh Token for a new Access Token.

