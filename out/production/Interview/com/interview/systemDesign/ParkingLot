For our purposes right now, weâ€™ll make the following assumptions.
1) The parking lot has multiple levels. Each level has multiple rows of spots.
2) The parking lot can park bike, cars, and buses.
4) A bike can park in any spot.
5) A car can park in either a single compact spot or a single large spot.
6) A bus can park in five large spots that are consecutive and within the same row. It cannot park
    in small spots.

Endpoints
    1. /reserve
    2. /payment
    3. /calculate payment
    4. /available slots
    5. /login
    6. /createAccount
    7. /bookSlot

Database : Expecting Structured data only. So, will go with MYSQL
    1. Garage Table - id, name, address
    2. User Table - id, name, email, password (SHA - 256 Hash), garage_id
    3. Spot Table - id, garage_id, spot_type, price, is_available
    4. Reservation - id, spot_id, start_time, end_time, is_paid
    5. Vehicle - id, registration, reservation_id

public enum VehicleType {
    BIKE, CAR, LARGE
}

public enum Level{
    ONE, TWO, THREE
}

public class Vehicle {
    private Long id;
    private String vehicleNumber;
    private VehicleType vehicleType;
    private int count;
}

public class Slot {
    private Long id;
    private Level level;
    private boolean isEmpty;
    private Long vehicleId;
}

public class VehicleParkingDetails{
    private Long id;
    private Long vehicleId;
    private Long slotId;
    private LocalDateTime startTime;
    private LocalDateTime endTime;
    private Boolean isPaymentSuccess;
}

public interface ParkingCostStrategy {
    int getCost(int parkHours);
}

public class BikeParkingService implements ParkingCostStrategy {
    @Override
    public int getCost(int parkHours) {
        if (parkHours < 2) {
            return 30;
        }
        return (parkHours - 2) * 10 + 30;
    }
}

public class CarParkingService implements ParkingCostStrategy {
    @Override
    public int getCost(int parkHours) {
        //
    }
}

public class BusParkingService implements ParkingCostStrategy {
    @Override
    public int getCost(int parkHours) {
        //
    }
}

public class ParkingService{
    public Boolean isSlotAvailable(VehicleType type){

    }

    public void bookSlot(Vehicle vehicle){

    }

    public void releaseSlot(Vehicle vehicle){

    }
}