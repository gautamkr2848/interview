Java 8
    1. Functional Interface and lambda expression
            Functional interfaces are interfaces which represent some functionality.
            Can have only one abstract method.
    2. Stream API
    3. Default and static methods in Interface
    4. forEach() method in Iterable interface

Java 9
    1. Private method in interface
    2. List.of(1, 2, 3);
       Set.of();
       map.of();

Java 10
    1. GC interface
    2. Local-Variable Type Inference
        a. new keyword var is added
            for (var number : numbers) {

            }

Key Differences between Java 8 and Java 21:

String Templates - Java allows embedding of literal text with expression in Java and this has been introduced as a Preview Feature.

The motivation of String templates are:

    Allows embedding expressions directly with in a string.
    Improves readability.
    A better much safer approach to string concatenation.
    Reduce the usage of String Builder.

Consider Below Example without String Template:
    String name = "Duke";
    String message = "My name is"+ name;

Using String Template:
    String name = "Duke";
    String info = STR."My name is \{name}";
    System.out.println(info);       //My name is Duke


    String user = "Duke";
    char option = 'b';
    String choice  = STR."\{user} has chosen option \{option}";
    System.out.println(choice);         //Duke has chosen option b

Virtual Threads - Virtual threads are light weight efficient alternative to the threads in Java. Virtual threads helps in creating highly concurrent application.

    Virtual threads are light weight as compared to os threads. They are cheap to create and destroy and millions of threads can be created to execute tasks concurrently.
    Virtual thread simplifies the concurrent programming model.
    Virtual threads are managed by Java virtual machine and not the underlying operation thread.
    There is no one to one mapping between virtual thread and OS thread.
    JVM can handle large number of virtual threads with limited number of OS threads.
    Virtual threads perform better even at high I/O operations.

How Virtual Threads Work
In a server application, a thread is created per request basis which is not scalable and that leads to overhead of context switching and thread creation. With light weight nature of the Virtual threads, this is significantly reduced.
JVM can use very small number of OS thread in order to create multiple Virtual threads which increased efficiency and helps in parallelizing multiple requests.
When a virtual thread blocks it is suspended by the JVM and the carrier thread is able to run other virtual threads.
Creating virtual threads.

import java.lang.Thread;

public class VirtualThreadExample {
    public static void main(String[] args) {
        Thread thread = Thread.startVirtualThread(() -> {
            System.out.println("This is a virtual thread!");
            // Your task here
        });
        thread.join(); // Optional: Wait for the virtual thread to finish
    }
}
Using Builder Factory Method:

import java.lang.Thread;

public class VirtualThreadExampleFactory {
    public static void main(String[] args) throws InterruptedException {
        Thread thread = Thread.ofVirtual().unstarted(() -> {
            System.out.println("This is a virtual thread created using Thread.Builder!");
            // Your task here
        });
        thread.start();
        thread.join(); // Wait for the virtual thread to finish
    }
}

Record Templates:
Record patterns in Java, are a feature aimed at enhancing the language’s pattern matching capabilities, particularly for record types.

Record patterns extend the Record functionality by providing pattern matching and deconstruction of record values.

For example let’s Consider a Record.

public record Employee(String name x, double  salary) {}

Lets Deconstruct and pattern match an Employee Record

Employee employee = new Point("Vikas", 3456.89);

if (employee instanceof Employee(String name, double salary)) {
    System.out.println("Name : " + name+ ", Salary: " + salary);
}

Usage in Switch Expression:

String details = switch(employee) {
    case Employee(String name, double  salary) when salary> 2000.89-> "Employee is Manager";
    case Employee(String name, double  salary) -> "Employee is (" + name+ ", " salary+ + ")";
    default -> "Unknown Employee";
};
Pattern Matching for Switch Statements:
Key Aspects of Pattern Matching for Switch
Switch case can match the pattern now instead of just matching the constant value.
Reduce boilerplate code like if-else-if statements.
More expressive and readable code.
Eliminate type casting using instanceOf.
Lets look at the below example:

if (object instanceof String) {
    String s = (String) obj;
    // Handle string case
} else if (obj instanceof Integer) {
    Integer i = (Integer) obj;
    // Handle integer case
} // and so on...
Now lets use the Pattern Matching for the Switch Statement.

switch (object) {
    case String s -> // Handle string case
    case Integer i -> // Handle integer case
    // and so on...
    default -> // Handle the default case
}
Lets Look at the record.
public record Point(int x, int y) {}
public class SwitchPatternMatchingExample {
    public static void main(String[] args) {
        Object obj = // ... some object

        String result = switch (obj) {
            case String s -> "String of length " + s.length();
            case Integer i -> "Integer with value " + i;
            case Point p && p.x == p.y -> "Same X,Y Cooridinates "
            case Point p-> "Point with X Axis " + r.x + " and Y Axis " + p.y;
            default -> "Unknown object";
        };

        System.out.println(result);
    }
}
Lets look at an ENUM example:

public enum TrafficLightsColors {
    RED, YELLOW, GREEN;
}
Lets Look at the Switch Statement:

public class TrafficLightColorExample {
    public static void main(String[] args) {
        TrafficLightsColors light = // some value from TrafficLight enum

        String action = switch (light) {
            case RED -> "Stop";
            case YELLOW -> "Prepare to stop";
            case GREEN -> "Go";
        };

        System.out.println("The light is " + light + ": " + action);
    }
}